
uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  0000056c  00000600  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000056c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800142  00800142  00000642  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000642  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000674  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  000006b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000153c  00000000  00000000  000007b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aa9  00000000  00000000  00001cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a52  00000000  00000000  00002799  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ac  00000000  00000000  000031ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000583  00000000  00000000  00003498  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bb3  00000000  00000000  00003a1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000045ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 4a 01 	jmp	0x294	; 0x294 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__vector_18>
  4c:	0c 94 18 02 	jmp	0x430	; 0x430 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 5f 01 	jmp	0x2be	; 0x2be <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e6       	ldi	r30, 0x6C	; 108
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 34       	cpi	r26, 0x42	; 66
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e4       	ldi	r26, 0x42	; 66
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 38       	cpi	r26, 0x87	; 135
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <main>
  9e:	0c 94 b4 02 	jmp	0x568	; 0x568 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	29 9a       	sbi	0x05, 1	; 5
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	8a 95       	dec	r24
  ac:	f1 f7       	brne	.-4      	; 0xaa <toggle_e+0x4>
  ae:	00 00       	nop
  b0:	29 98       	cbi	0x05, 1	; 5
  b2:	08 95       	ret

000000b4 <lcd_write>:
  b4:	cf 93       	push	r28
  b6:	c8 2f       	mov	r28, r24
  b8:	66 23       	and	r22, r22
  ba:	11 f0       	breq	.+4      	; 0xc0 <lcd_write+0xc>
  bc:	28 9a       	sbi	0x05, 0	; 5
  be:	01 c0       	rjmp	.+2      	; 0xc2 <lcd_write+0xe>
  c0:	28 98       	cbi	0x05, 0	; 5
  c2:	54 9a       	sbi	0x0a, 4	; 10
  c4:	55 9a       	sbi	0x0a, 5	; 10
  c6:	56 9a       	sbi	0x0a, 6	; 10
  c8:	57 9a       	sbi	0x0a, 7	; 10
  ca:	5f 98       	cbi	0x0b, 7	; 11
  cc:	5e 98       	cbi	0x0b, 6	; 11
  ce:	5d 98       	cbi	0x0b, 5	; 11
  d0:	5c 98       	cbi	0x0b, 4	; 11
  d2:	cc 23       	and	r28, r28
  d4:	0c f4       	brge	.+2      	; 0xd8 <lcd_write+0x24>
  d6:	5f 9a       	sbi	0x0b, 7	; 11
  d8:	c6 fd       	sbrc	r28, 6
  da:	5e 9a       	sbi	0x0b, 6	; 11
  dc:	c5 fd       	sbrc	r28, 5
  de:	5d 9a       	sbi	0x0b, 5	; 11
  e0:	c4 fd       	sbrc	r28, 4
  e2:	5c 9a       	sbi	0x0b, 4	; 11
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  e8:	5f 98       	cbi	0x0b, 7	; 11
  ea:	5e 98       	cbi	0x0b, 6	; 11
  ec:	5d 98       	cbi	0x0b, 5	; 11
  ee:	5c 98       	cbi	0x0b, 4	; 11
  f0:	c3 fd       	sbrc	r28, 3
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	c2 fd       	sbrc	r28, 2
  f6:	5e 9a       	sbi	0x0b, 6	; 11
  f8:	c1 fd       	sbrc	r28, 1
  fa:	5d 9a       	sbi	0x0b, 5	; 11
  fc:	c0 fd       	sbrc	r28, 0
  fe:	5c 9a       	sbi	0x0b, 4	; 11
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 104:	5c 9a       	sbi	0x0b, 4	; 11
 106:	5d 9a       	sbi	0x0b, 5	; 11
 108:	5e 9a       	sbi	0x0b, 6	; 11
 10a:	5f 9a       	sbi	0x0b, 7	; 11
 10c:	87 eb       	ldi	r24, 0xB7	; 183
 10e:	9b e0       	ldi	r25, 0x0B	; 11
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_write+0x5c>
 114:	00 c0       	rjmp	.+0      	; 0x116 <lcd_write+0x62>
 116:	00 00       	nop
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <lcd_command>:
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 122:	08 95       	ret

00000124 <lcd_gotoxy>:
 124:	61 11       	cpse	r22, r1
 126:	04 c0       	rjmp	.+8      	; 0x130 <lcd_gotoxy+0xc>
 128:	80 58       	subi	r24, 0x80	; 128
 12a:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 12e:	08 95       	ret
 130:	80 54       	subi	r24, 0x40	; 64
 132:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 136:	08 95       	ret

00000138 <lcd_clrscr>:
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 13e:	08 95       	ret

00000140 <lcd_putc>:
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 146:	08 95       	ret

00000148 <lcd_puts>:
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	ec 01       	movw	r28, r24
 14e:	21 96       	adiw	r28, 0x01	; 1
 150:	fc 01       	movw	r30, r24
 152:	80 81       	ld	r24, Z
 154:	88 23       	and	r24, r24
 156:	29 f0       	breq	.+10     	; 0x162 <lcd_puts+0x1a>
 158:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_putc>
 15c:	89 91       	ld	r24, Y+
 15e:	81 11       	cpse	r24, r1
 160:	fb cf       	rjmp	.-10     	; 0x158 <lcd_puts+0x10>
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 168:	cf 93       	push	r28
 16a:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 16c:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 16e:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 170:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 172:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 174:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 176:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 178:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	99 ef       	ldi	r25, 0xF9	; 249
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <lcd_init+0x16>
 182:	00 c0       	rjmp	.+0      	; 0x184 <lcd_init+0x1c>
 184:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 186:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 188:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 18a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 18e:	8f e1       	ldi	r24, 0x1F	; 31
 190:	9e e4       	ldi	r25, 0x4E	; 78
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <lcd_init+0x2a>
 196:	00 c0       	rjmp	.+0      	; 0x198 <lcd_init+0x30>
 198:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 19a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_init+0x3a>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_init+0x40>
 1a8:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 1aa:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_init+0x4a>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <lcd_init+0x50>
 1b8:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1ba:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 1bc:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1c0:	8f ef       	ldi	r24, 0xFF	; 255
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <lcd_init+0x5c>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <lcd_init+0x62>
 1ca:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1cc:	88 e2       	ldi	r24, 0x28	; 40
 1ce:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 1d2:	88 e0       	ldi	r24, 0x08	; 8
 1d4:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_clrscr();                  /* display clear                */
 1d8:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1dc:	86 e0       	ldi	r24, 0x06	; 6
 1de:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 1e2:	8c 2f       	mov	r24, r28
 1e4:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
}/* lcd_init */
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <main>:
 * and UART.
 */
int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 1ec:	8c e0       	ldi	r24, 0x0C	; 12
 1ee:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_init>
    lcd_gotoxy(1, 0); lcd_puts("value:");
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
 1fa:	89 e0       	ldi	r24, 0x09	; 9
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
    lcd_gotoxy(3, 1); lcd_puts("key:");
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	83 e0       	ldi	r24, 0x03	; 3
 206:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
 20a:	80 e1       	ldi	r24, 0x10	; 16
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
    lcd_gotoxy(8, 0); lcd_puts("a");    // Put ADC value in decimal
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	88 e0       	ldi	r24, 0x08	; 8
 216:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
 21a:	85 e1       	ldi	r24, 0x15	; 21
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
    lcd_gotoxy(13,0); lcd_puts("b");    // Put ADC value in hexadecimal
 222:	60 e0       	ldi	r22, 0x00	; 0
 224:	8d e0       	ldi	r24, 0x0D	; 13
 226:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
 22a:	87 e1       	ldi	r24, 0x17	; 23
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
    lcd_gotoxy(8, 1); lcd_puts("c");    // Put button name here
 232:	61 e0       	ldi	r22, 0x01	; 1
 234:	88 e0       	ldi	r24, 0x08	; 8
 236:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
 23a:	89 e1       	ldi	r24, 0x19	; 25
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>

    // Configure ADC to convert PC0[A0] analog value
    // Set ADC reference to AVcc
	ADMUX |= (1 << REFS0);
 242:	ec e7       	ldi	r30, 0x7C	; 124
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	80 64       	ori	r24, 0x40	; 64
 24a:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);	
 24c:	80 81       	ld	r24, Z
 24e:	8f 77       	andi	r24, 0x7F	; 127
 250:	80 83       	st	Z, r24
	
    // Set input channel to ADC0
	ADMUX &= ~((1 << MUX0) | (1 << MUX1) | (1 << MUX2) | (1 << MUX3));
 252:	80 81       	ld	r24, Z
 254:	80 7f       	andi	r24, 0xF0	; 240
 256:	80 83       	st	Z, r24
    
	// Enable ADC module
	ADCSRA |= (1 << ADEN);
 258:	ea e7       	ldi	r30, 0x7A	; 122
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	80 68       	ori	r24, 0x80	; 128
 260:	80 83       	st	Z, r24
	
    // Enable conversion complete interrupt
	ADCSRA |= (1 << ADIE);
 262:	80 81       	ld	r24, Z
 264:	88 60       	ori	r24, 0x08	; 8
 266:	80 83       	st	Z, r24
	
    // Set clock prescaler to 128
	ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
 268:	80 81       	ld	r24, Z
 26a:	87 60       	ori	r24, 0x07	; 7
 26c:	80 83       	st	Z, r24

    // Configure 16-bit Timer/Counter1 to start ADC conversion
    // Enable interrupt and set the overflow prescaler to 262 ms
	TIM1_overflow_262ms();
 26e:	e1 e8       	ldi	r30, 0x81	; 129
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	8b 7f       	andi	r24, 0xFB	; 251
 276:	80 83       	st	Z, r24
 278:	80 81       	ld	r24, Z
 27a:	83 60       	ori	r24, 0x03	; 3
 27c:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
 27e:	ef e6       	ldi	r30, 0x6F	; 111
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	81 60       	ori	r24, 0x01	; 1
 286:	80 83       	st	Z, r24

    // Initialize UART to asynchronous, 8N1, 9600
	uart_init(UART_BAUD_SELECT(9600, F_CPU));
 288:	87 e6       	ldi	r24, 0x67	; 103
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 42 02 	call	0x484	; 0x484 <uart_init>

    // Enables interrupts by setting the global interrupt mask
    sei();
 290:	78 94       	sei
 292:	ff cf       	rjmp	.-2      	; 0x292 <main+0xa6>

00000294 <__vector_13>:
/**
 * ISR starts when Timer/Counter1 overflows. Use single conversion mode
 * and start conversion four times per second.
 */
ISR(TIMER1_OVF_vect)
{
 294:	1f 92       	push	r1
 296:	0f 92       	push	r0
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	0f 92       	push	r0
 29c:	11 24       	eor	r1, r1
 29e:	8f 93       	push	r24
 2a0:	ef 93       	push	r30
 2a2:	ff 93       	push	r31
    // Start ADC conversion
	ADCSRA |= (1 << ADSC);
 2a4:	ea e7       	ldi	r30, 0x7A	; 122
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	80 81       	ld	r24, Z
 2aa:	80 64       	ori	r24, 0x40	; 64
 2ac:	80 83       	st	Z, r24
}
 2ae:	ff 91       	pop	r31
 2b0:	ef 91       	pop	r30
 2b2:	8f 91       	pop	r24
 2b4:	0f 90       	pop	r0
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	0f 90       	pop	r0
 2ba:	1f 90       	pop	r1
 2bc:	18 95       	reti

000002be <__vector_21>:
/**
 * ISR starts when ADC completes the conversion. Display value on LCD
 * and send it to UART.
 */
ISR(ADC_vect)
{
 2be:	1f 92       	push	r1
 2c0:	0f 92       	push	r0
 2c2:	0f b6       	in	r0, 0x3f	; 63
 2c4:	0f 92       	push	r0
 2c6:	11 24       	eor	r1, r1
 2c8:	0f 93       	push	r16
 2ca:	1f 93       	push	r17
 2cc:	2f 93       	push	r18
 2ce:	3f 93       	push	r19
 2d0:	4f 93       	push	r20
 2d2:	5f 93       	push	r21
 2d4:	6f 93       	push	r22
 2d6:	7f 93       	push	r23
 2d8:	8f 93       	push	r24
 2da:	9f 93       	push	r25
 2dc:	af 93       	push	r26
 2de:	bf 93       	push	r27
 2e0:	ef 93       	push	r30
 2e2:	ff 93       	push	r31
 2e4:	cf 93       	push	r28
 2e6:	df 93       	push	r29
 2e8:	cd b7       	in	r28, 0x3d	; 61
 2ea:	de b7       	in	r29, 0x3e	; 62
 2ec:	28 97       	sbiw	r28, 0x08	; 8
 2ee:	de bf       	out	0x3e, r29	; 62
 2f0:	cd bf       	out	0x3d, r28	; 61
    uint16_t value = ADC;
 2f2:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 2f6:	10 91 79 00 	lds	r17, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
    char lcd_string[8] = "        ";
 2fa:	88 e0       	ldi	r24, 0x08	; 8
 2fc:	e0 e0       	ldi	r30, 0x00	; 0
 2fe:	f1 e0       	ldi	r31, 0x01	; 1
 300:	de 01       	movw	r26, r28
 302:	11 96       	adiw	r26, 0x01	; 1
 304:	01 90       	ld	r0, Z+
 306:	0d 92       	st	X+, r0
 308:	8a 95       	dec	r24
 30a:	e1 f7       	brne	.-8      	; 0x304 <__vector_21+0x46>
	
	// Clear decimal and hex positions
	lcd_gotoxy(8, 0);
 30c:	60 e0       	ldi	r22, 0x00	; 0
 30e:	88 e0       	ldi	r24, 0x08	; 8
 310:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
	lcd_puts(lcd_string);
 314:	ce 01       	movw	r24, r28
 316:	01 96       	adiw	r24, 0x01	; 1
 318:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 31c:	4a e0       	ldi	r20, 0x0A	; 10
 31e:	be 01       	movw	r22, r28
 320:	6f 5f       	subi	r22, 0xFF	; 255
 322:	7f 4f       	sbci	r23, 0xFF	; 255
 324:	c8 01       	movw	r24, r16
 326:	0e 94 7f 02 	call	0x4fe	; 0x4fe <__itoa_ncheck>
	
	// Print ADC value on LCD in decimal
	itoa(value, lcd_string, 10);
	lcd_gotoxy(8, 0);
 32a:	60 e0       	ldi	r22, 0x00	; 0
 32c:	88 e0       	ldi	r24, 0x08	; 8
 32e:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
	lcd_puts(lcd_string);
 332:	ce 01       	movw	r24, r28
 334:	01 96       	adiw	r24, 0x01	; 1
 336:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
	
	if (value < 700)
 33a:	0c 3b       	cpi	r16, 0xBC	; 188
 33c:	82 e0       	ldi	r24, 0x02	; 2
 33e:	18 07       	cpc	r17, r24
 340:	60 f4       	brcc	.+24     	; 0x35a <__vector_21+0x9c>
	{
		// Send datat through UART
		uart_puts("ADC value in decimal: ");
 342:	8b e1       	ldi	r24, 0x1B	; 27
 344:	91 e0       	ldi	r25, 0x01	; 1
 346:	0e 94 70 02 	call	0x4e0	; 0x4e0 <uart_puts>
		uart_puts(lcd_string);
 34a:	ce 01       	movw	r24, r28
 34c:	01 96       	adiw	r24, 0x01	; 1
 34e:	0e 94 70 02 	call	0x4e0	; 0x4e0 <uart_puts>
		uart_puts("\r\n");
 352:	82 e3       	ldi	r24, 0x32	; 50
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	0e 94 70 02 	call	0x4e0	; 0x4e0 <uart_puts>
 35a:	40 e1       	ldi	r20, 0x10	; 16
 35c:	be 01       	movw	r22, r28
 35e:	6f 5f       	subi	r22, 0xFF	; 255
 360:	7f 4f       	sbci	r23, 0xFF	; 255
 362:	c8 01       	movw	r24, r16
 364:	0e 94 7f 02 	call	0x4fe	; 0x4fe <__itoa_ncheck>
	}
	
	// Print ADC value on LCD in hex
	itoa(value, lcd_string, 16);
	lcd_gotoxy(13, 0);
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	8d e0       	ldi	r24, 0x0D	; 13
 36c:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
	lcd_puts(lcd_string);
 370:	ce 01       	movw	r24, r28
 372:	01 96       	adiw	r24, 0x01	; 1
 374:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
	
	// Clear key positions
	lcd_gotoxy(8, 1);
 378:	61 e0       	ldi	r22, 0x01	; 1
 37a:	88 e0       	ldi	r24, 0x08	; 8
 37c:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
	lcd_puts("      ");
 380:	85 e3       	ldi	r24, 0x35	; 53
 382:	91 e0       	ldi	r25, 0x01	; 1
 384:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
	lcd_gotoxy(8, 1);
 388:	61 e0       	ldi	r22, 0x01	; 1
 38a:	88 e0       	ldi	r24, 0x08	; 8
 38c:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
	
	// Print key
	if (value > 1016)
 390:	09 3f       	cpi	r16, 0xF9	; 249
 392:	13 40       	sbci	r17, 0x03	; 3
 394:	20 f0       	brcs	.+8      	; 0x39e <__vector_21+0xe0>
	{
		lcd_puts("None");
 396:	8c e3       	ldi	r24, 0x3C	; 60
 398:	91 e0       	ldi	r25, 0x01	; 1
 39a:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
	}
}
 39e:	28 96       	adiw	r28, 0x08	; 8
 3a0:	0f b6       	in	r0, 0x3f	; 63
 3a2:	f8 94       	cli
 3a4:	de bf       	out	0x3e, r29	; 62
 3a6:	0f be       	out	0x3f, r0	; 63
 3a8:	cd bf       	out	0x3d, r28	; 61
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	ff 91       	pop	r31
 3b0:	ef 91       	pop	r30
 3b2:	bf 91       	pop	r27
 3b4:	af 91       	pop	r26
 3b6:	9f 91       	pop	r25
 3b8:	8f 91       	pop	r24
 3ba:	7f 91       	pop	r23
 3bc:	6f 91       	pop	r22
 3be:	5f 91       	pop	r21
 3c0:	4f 91       	pop	r20
 3c2:	3f 91       	pop	r19
 3c4:	2f 91       	pop	r18
 3c6:	1f 91       	pop	r17
 3c8:	0f 91       	pop	r16
 3ca:	0f 90       	pop	r0
 3cc:	0f be       	out	0x3f, r0	; 63
 3ce:	0f 90       	pop	r0
 3d0:	1f 90       	pop	r1
 3d2:	18 95       	reti

000003d4 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 3d4:	1f 92       	push	r1
 3d6:	0f 92       	push	r0
 3d8:	0f b6       	in	r0, 0x3f	; 63
 3da:	0f 92       	push	r0
 3dc:	11 24       	eor	r1, r1
 3de:	2f 93       	push	r18
 3e0:	8f 93       	push	r24
 3e2:	9f 93       	push	r25
 3e4:	ef 93       	push	r30
 3e6:	ff 93       	push	r31
 3e8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 3ec:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 3f0:	8c 71       	andi	r24, 0x1C	; 28
 3f2:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <UART_RxHead>
 3f6:	ef 5f       	subi	r30, 0xFF	; 255
 3f8:	ef 71       	andi	r30, 0x1F	; 31
 3fa:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <UART_RxTail>
 3fe:	e9 17       	cp	r30, r25
 400:	39 f0       	breq	.+14     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 402:	e0 93 44 01 	sts	0x0144, r30	; 0x800144 <UART_RxHead>
 406:	f0 e0       	ldi	r31, 0x00	; 0
 408:	e9 5b       	subi	r30, 0xB9	; 185
 40a:	fe 4f       	sbci	r31, 0xFE	; 254
 40c:	20 83       	st	Z, r18
 40e:	01 c0       	rjmp	.+2      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 410:	82 e0       	ldi	r24, 0x02	; 2
 412:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <__data_end>
 416:	89 2b       	or	r24, r25
 418:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end>
 41c:	ff 91       	pop	r31
 41e:	ef 91       	pop	r30
 420:	9f 91       	pop	r25
 422:	8f 91       	pop	r24
 424:	2f 91       	pop	r18
 426:	0f 90       	pop	r0
 428:	0f be       	out	0x3f, r0	; 63
 42a:	0f 90       	pop	r0
 42c:	1f 90       	pop	r1
 42e:	18 95       	reti

00000430 <__vector_19>:
 430:	1f 92       	push	r1
 432:	0f 92       	push	r0
 434:	0f b6       	in	r0, 0x3f	; 63
 436:	0f 92       	push	r0
 438:	11 24       	eor	r1, r1
 43a:	8f 93       	push	r24
 43c:	9f 93       	push	r25
 43e:	ef 93       	push	r30
 440:	ff 93       	push	r31
 442:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <UART_TxHead>
 446:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <UART_TxTail>
 44a:	98 17       	cp	r25, r24
 44c:	69 f0       	breq	.+26     	; 0x468 <__vector_19+0x38>
 44e:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <UART_TxTail>
 452:	ef 5f       	subi	r30, 0xFF	; 255
 454:	ef 71       	andi	r30, 0x1F	; 31
 456:	e0 93 45 01 	sts	0x0145, r30	; 0x800145 <UART_TxTail>
 45a:	f0 e0       	ldi	r31, 0x00	; 0
 45c:	e9 59       	subi	r30, 0x99	; 153
 45e:	fe 4f       	sbci	r31, 0xFE	; 254
 460:	80 81       	ld	r24, Z
 462:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 466:	05 c0       	rjmp	.+10     	; 0x472 <__vector_19+0x42>
 468:	e1 ec       	ldi	r30, 0xC1	; 193
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	80 81       	ld	r24, Z
 46e:	8f 7d       	andi	r24, 0xDF	; 223
 470:	80 83       	st	Z, r24
 472:	ff 91       	pop	r31
 474:	ef 91       	pop	r30
 476:	9f 91       	pop	r25
 478:	8f 91       	pop	r24
 47a:	0f 90       	pop	r0
 47c:	0f be       	out	0x3f, r0	; 63
 47e:	0f 90       	pop	r0
 480:	1f 90       	pop	r1
 482:	18 95       	reti

00000484 <uart_init>:
 484:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <UART_TxHead>
 488:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <UART_TxTail>
 48c:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <UART_RxHead>
 490:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <UART_RxTail>
 494:	99 23       	and	r25, r25
 496:	1c f4       	brge	.+6      	; 0x49e <uart_init+0x1a>
 498:	22 e0       	ldi	r18, 0x02	; 2
 49a:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 49e:	90 78       	andi	r25, 0x80	; 128
 4a0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 4a4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 4a8:	88 e9       	ldi	r24, 0x98	; 152
 4aa:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 4ae:	86 e0       	ldi	r24, 0x06	; 6
 4b0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 4b4:	08 95       	ret

000004b6 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 4b6:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <UART_TxHead>
 4ba:	2f 5f       	subi	r18, 0xFF	; 255
 4bc:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 4be:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <UART_TxTail>
 4c2:	29 17       	cp	r18, r25
 4c4:	e1 f3       	breq	.-8      	; 0x4be <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 4c6:	e2 2f       	mov	r30, r18
 4c8:	f0 e0       	ldi	r31, 0x00	; 0
 4ca:	e9 59       	subi	r30, 0x99	; 153
 4cc:	fe 4f       	sbci	r31, 0xFE	; 254
 4ce:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 4d0:	20 93 46 01 	sts	0x0146, r18	; 0x800146 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 4d4:	e1 ec       	ldi	r30, 0xC1	; 193
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	80 81       	ld	r24, Z
 4da:	80 62       	ori	r24, 0x20	; 32
 4dc:	80 83       	st	Z, r24
 4de:	08 95       	ret

000004e0 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 4e0:	cf 93       	push	r28
 4e2:	df 93       	push	r29
 4e4:	ec 01       	movw	r28, r24
    while (*s)
 4e6:	88 81       	ld	r24, Y
 4e8:	88 23       	and	r24, r24
 4ea:	31 f0       	breq	.+12     	; 0x4f8 <uart_puts+0x18>
 4ec:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 4ee:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 4f2:	89 91       	ld	r24, Y+
 4f4:	81 11       	cpse	r24, r1
 4f6:	fb cf       	rjmp	.-10     	; 0x4ee <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 4f8:	df 91       	pop	r29
 4fa:	cf 91       	pop	r28
 4fc:	08 95       	ret

000004fe <__itoa_ncheck>:
 4fe:	bb 27       	eor	r27, r27
 500:	4a 30       	cpi	r20, 0x0A	; 10
 502:	31 f4       	brne	.+12     	; 0x510 <__itoa_ncheck+0x12>
 504:	99 23       	and	r25, r25
 506:	22 f4       	brpl	.+8      	; 0x510 <__itoa_ncheck+0x12>
 508:	bd e2       	ldi	r27, 0x2D	; 45
 50a:	90 95       	com	r25
 50c:	81 95       	neg	r24
 50e:	9f 4f       	sbci	r25, 0xFF	; 255
 510:	0c 94 8b 02 	jmp	0x516	; 0x516 <__utoa_common>

00000514 <__utoa_ncheck>:
 514:	bb 27       	eor	r27, r27

00000516 <__utoa_common>:
 516:	fb 01       	movw	r30, r22
 518:	55 27       	eor	r21, r21
 51a:	aa 27       	eor	r26, r26
 51c:	88 0f       	add	r24, r24
 51e:	99 1f       	adc	r25, r25
 520:	aa 1f       	adc	r26, r26
 522:	a4 17       	cp	r26, r20
 524:	10 f0       	brcs	.+4      	; 0x52a <__utoa_common+0x14>
 526:	a4 1b       	sub	r26, r20
 528:	83 95       	inc	r24
 52a:	50 51       	subi	r21, 0x10	; 16
 52c:	b9 f7       	brne	.-18     	; 0x51c <__utoa_common+0x6>
 52e:	a0 5d       	subi	r26, 0xD0	; 208
 530:	aa 33       	cpi	r26, 0x3A	; 58
 532:	08 f0       	brcs	.+2      	; 0x536 <__utoa_common+0x20>
 534:	a9 5d       	subi	r26, 0xD9	; 217
 536:	a1 93       	st	Z+, r26
 538:	00 97       	sbiw	r24, 0x00	; 0
 53a:	79 f7       	brne	.-34     	; 0x51a <__utoa_common+0x4>
 53c:	b1 11       	cpse	r27, r1
 53e:	b1 93       	st	Z+, r27
 540:	11 92       	st	Z+, r1
 542:	cb 01       	movw	r24, r22
 544:	0c 94 a4 02 	jmp	0x548	; 0x548 <strrev>

00000548 <strrev>:
 548:	dc 01       	movw	r26, r24
 54a:	fc 01       	movw	r30, r24
 54c:	67 2f       	mov	r22, r23
 54e:	71 91       	ld	r23, Z+
 550:	77 23       	and	r23, r23
 552:	e1 f7       	brne	.-8      	; 0x54c <strrev+0x4>
 554:	32 97       	sbiw	r30, 0x02	; 2
 556:	04 c0       	rjmp	.+8      	; 0x560 <strrev+0x18>
 558:	7c 91       	ld	r23, X
 55a:	6d 93       	st	X+, r22
 55c:	70 83       	st	Z, r23
 55e:	62 91       	ld	r22, -Z
 560:	ae 17       	cp	r26, r30
 562:	bf 07       	cpc	r27, r31
 564:	c8 f3       	brcs	.-14     	; 0x558 <strrev+0x10>
 566:	08 95       	ret

00000568 <_exit>:
 568:	f8 94       	cli

0000056a <__stop_program>:
 56a:	ff cf       	rjmp	.-2      	; 0x56a <__stop_program>
